unit cProVendas;

interface

    uses
        System.Classes,
         Vcl.Controls,
         vcl.ExtActns,
         vcl.Dialogs,
         ZAbstractConnection,
         ZConnection,
         ZAbstractRODataset,
         ZAbstractDataset,
         ZDataset,
         System.SysUtils;


type
    Tvenda = class
    private
        ConexaoDB :TZConnection;
        F_vendaId:integer;
        F_clienteId:integer;
        F_dataVenda:TdateTime;
        F_totalVenda: Double;

    public
        constructor Create(aConexao:TZConnection);
        destructor  Destroy;override;
        function Inserir:Boolean;
        function Atualizar:Boolean;
        function Apagar(id:Integer):Boolean;
        function Selecionar(id:integer):Boolean;
    Published
        property VendaId:integer          read F_vendaId      write F_vendaId;
        property ClienteId:integer        read F_ClienteId    write F_clienteId;
        property DataVenda:TdateTime      read F_dataVenda    write F_dataVenda;
        property TotalVenda:Double        read F_TotalVenda   write F_totalVenda;

    end;


implementation



{ Tvenda }

{$region 'CONSTRUCTORS E DESTRUCTORS'}
constructor Tvenda.Create(aConexao: TZConnection);
begin
    ConexaoDB := aConexao;
end;

destructor Tvenda.Destroy;
begin

  inherited;
end;

{$endregion}

function Tvenda.Apagar(id:Integer): Boolean;
var qry:TZQuery;
    begin
        if messageDlg('Apagar o Registro : '+#13+#13+
        'Venda Nro:'+IntToStr(Id),mtConfirmation,[mbYes,mbNo],0)=mrNo then
         begin
             Result := false;
             abort;
         end;

         try
             Result := true;
             ConexaoDB.StartTransaction;
             qry    := TZQuery.Create(nil);
             qry.Connection := conexaoDB;
             //apaga os itens primeiro
             qry.SQL.Clear;
             qry.SQL.Add(' DELETE FROM vendasItens '+
                         ' WHERE vendaId = :vendaId ');
             qry.ParamByName('vendaId').AsInteger := id;
             try
                 qry.ExecSQL;
                 //apaga a tabela master
                 qry.SQL.Clear;
                 qry.SQL.Add('DELETE FROM vendas '+
                             ' WHERE vendaId = :vendaId');
                 qry.ParamByName('vendaId').AsInteger := id;
                 qry.ExecSQL;
                 ConexaoDB.commit;
             Except
                  ConexaoDB.Rollback;
                  Result := False;
             end;
         finally
              if assigned(qry) then
                  FreeAndNil(qry);
         end;
    end;

function Tvenda.Atualizar: Boolean;
var qry : TZQuery;
    begin
         try
             Result := true;
             qry := TZQuery.Create(nil);
             qry.Connection := ConexaoDB;
             qry.SQL.Clear;
             qry.SQL.Add('UPDATE vendas ' +
                        ' SET clienteId = :clienteId '+
                        '  ,dataVenda = : datavenda '+
                        '  ,totalvenda = :totalvenda'+
                        ' WHERE vendaId = :vendaId');
             qry.ParamByName('vendaId').AsInteger    :=self.F_vendaId;
             qry.ParamByName('clienteId').AsInteger  :=self.F_clienteId;
             qry.ParamByName('dataVenda').AsDateTime :=self.F_dataVenda;
             qry.ParamByName('totaVenda').AsFloat    :=Self.F_totalVenda;

             try
                qry.ExecSQL;
             Except
                 Result := false;
             end;

         finally
             if assigned(qry) then
                FreeAndNil(qry);
         end;

    end;


function Tvenda.Inserir: Boolean;
var qry:TZQuery;
    IdVendaGerado :integer;
    begin
        try
            Result := True;
            ConexaoDB.StartTransaction;
            qry := TZQuery.Create(nil);
            qry.Connection := ConexaoDB;
            //faz a inclusao no Banco de Dados
            qry.SQL.Clear;
            Qry.SQL.Add('INSERT INTO vendas (clienteId, dataVenda, totalVenda)  '+
                '            VALUES (:clienteId,:dataVenda,:totalVenda )');
            Qry.ParamByName('clienteId').AsInteger  :=Self.F_clienteId;
            Qry.ParamByName('dataVenda').AsDateTime :=Self.F_dataVenda;
            Qry.ParamByName('totalVenda').AsFloat   :=Self.F_totalVenda;

            try
                qry.ExecSQL;
                //Recupera o ID Gerado no Insert
                qry.SQL.Clear;
                qry.SQL.Add('SELECT LAST_INSERT_ID()AS ID');
                qry.Open;

                //id da Tabela Master (venda)
                IdVendaGerado := qry.FieldByName('ID').AsInteger;

                ConexaoDB.Commit;
            Except
                ConexaoDB.Rollback;
                result := False;
            end;

        finally
             if assigned(qry) then
                  FreeAndNil(qry);
        end;
    end;

function Tvenda.Selecionar(id: integer): Boolean;
var qry:TZQuery;
    begin
        try
            Result := true;
            qry := TZQuery.Create(nil);
            qry.Connection := ConexaoDB;
            qry.SQL.Clear;
            qry.SQL.ADD('SELECT vendaId '+
                '       ,clienteId    '  +
                 '     ,dataVenda      ' +
                 '     ,totalVenda     ' +
                 '   FROM vendas   '+
                 '   WHERE vendaId =: vendaId' );
           qry.ParamByName('vendaId').AsInteger := Id;

           try
              qry.Open;

              Self.F_vendaId        :=qry.FieldByName('vendaId').AsInteger;
              self.F_clienteId      :=qry.FieldByName('clienteId').AsInteger;
              Self.F_dataVenda      :=qry.FieldByName('dataVenda').AsDateTime;
              self.F_totalVenda     :=qry.FieldByName('totalVenda').AsFloat;
           except
               Result := false;
           end;


        finally
            if assigned(qry) then
                FreeAndNil(qry);
        end;
    end;

end.
